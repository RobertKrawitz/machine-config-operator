apiVersion: apps/v1
kind: Deployment
metadata:
  name: etcd-quorum-guard
  namespace: {{.TargetNamespace}}
spec:
  replicas: 3
  selector:
    matchLabels:
      k8s-app: etcd-quorum-guard
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: etcd-quorum-guard
        k8s-app: etcd-quorum-guard
    spec:
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - "etcd-quorum-guard"
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        node-role.kubernetes.io/master: ""
      priorityClassName: "system-cluster-critical"
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
        operator: Exists
      - key: node.kubernetes.io/memory-pressure
        effect: NoSchedule
        operator: Exists
      - key: node.kubernetes.io/disk-pressure
        effect: NoSchedule
        operator: Exists
      - key: node.kubernetes.io/not-ready
        effect: NoExecute
        operator: Exists
      - key: node.kubernetes.io/unreachable
        effect: NoExecute
        operator: Exists
      - key: node.kubernetes.io/unschedulable
        effect: NoExecute
        operator: Exists
      - key: node-role.kubernetes.io/etcd
        operator: Exists
        effect: NoSchedule
      containers:
      - image: "{{.Images.EtcdQuorumGuardImage}}"
        imagePullPolicy: IfNotPresent
        name: etcd-quorum-guard-container
        volumeMounts:
        - mountPath: "/etc/ssl/certs/etcd"
          name: etcd-metric-client
          readOnly: true
        - mountPath: "/var/run/etcd-metric-serving-ca"
          name: etcd-metric-serving-ca
          readOnly: true
        command:
        - "/bin/sh"
        args:
        - "-c"
        - |
          declare -r croot=/etc/ssl/certs/etcd
          set -x
          declare -r health_endpoint="https://127.0.0.1:9979/health"
          declare -r cert="$croot/tls.crt"
          declare -r key="$croot/tls.key"
          declare -r cacert="/var/run/etcd-metric-serving-ca/ca-bundle.crt"
          ls -lR "$croot"
          ls -lRL "$croot"
          ls -l "$cacert"
          ls -lL "$cacert"
          ls -lRL /var/run/secrets
          ls -lRL /var/run/etcd-metric-serving-ca
          while : ; do date; curl -k --max-time 2 --cert "${cert//:/\:}" --key "$key" --cacert "$cacert" "$health_endpoint"; sleep 5; done
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
                declare -r croot=/etc/ssl/certs/etcd
                declare -r health_endpoint="https://127.0.0.1:9979/health"
                declare -r cert="$croot/tls.crt"
                declare -r key="$croot/tls.key"
                declare -r cacert="/var/run/etcd-metric-serving-ca/ca-bundle.crt"
                [[ -z $cert || -z $key ]] && exit 1
                curl --max-time 2 -k --silent --cert "${cert//:/\:}" --key "$key" --cacert "$cacert" "$health_endpoint" |grep '{ *"health" *: *"true" *}'
            initialDelaySecond: 5
            periodSecond: 5
        resources:
          requests:
            cpu: 10m
            memory: 5Mi
      volumes:
      - name: etcd-metric-client
        secret:
          secretName: etcd-metric-client
      - name: etcd-metric-serving-ca
        configMap:
          name: etcd-metric-serving-ca
